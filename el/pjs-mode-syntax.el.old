;;;; -*- coding: windows-1252 -*-
;;;; COPYRIGHT (C) PLANISWARE $Date: 2015/12/10 14:51:39 $ 
;;;;
;;;; All Rights Reserved
;;;;
;;;; This program and the information contained herein are confidential to
;;;; and the property of PLANISWARE and are made available only to PLANISWARE
;;;; employees for the sole purpose of conducting PLANISWARE business.
;;;;
;;;; This program and copy therof and the information contained herein shall
;;;; be maintained in strictest confidence ; shall not be copied in whole or
;;;; in part except as authorized by the employee's manager ; and shall not
;;;; be disclosed or distributed (a) to persons who are not PLANISWARE employees,
;;;; or (b) to PLANISWARE employees for whom such information is not necessary in
;;;; connection with their assigned responsabilities.
;;;;
;;;; There shall be no exceptions to the terms and conditions set forth
;;;; herein except as authorized in writing by the responsible PLANISWARE General
;;;; Manager.

;;;;
;;;; FILE    : $RCSfile: pjs-mode-syntax.el,v $
;;;;
;;;; AUTHOR  : $Author: troche $
;;;;
;;;; VERSION : $Id: pjs-mode-syntax.el,v 3.1 2015/12/10 14:51:39 troche Exp $
;;;;
;;;; PURPOSE :
;;;;
;;;; (when (fboundp :set-source-info) (:set-source-info "$RCSfile: pjs-mode-syntax.el,v $" :id "$Id: pjs-mode-syntax.el,v 3.1 2015/12/10 14:51:39 troche Exp $" :version "$Revision: 3.1 $" :date "$Date: 2015/12/10 14:51:39 $ "))
;;;; (when (fboundp :doc-patch) (:doc-patch ""))
;;;; (:require-patch "")
;;;; HISTORY :
;;;; $Log: pjs-mode-syntax.el,v $
;;;; Revision 3.1  2015/12/10 14:51:39  troche
;;;; * pjs mode
;;;;  (header added automatically)
;;;;
;; constants
(defconst pjs-font-lock-constants
  (js--regexp-opt-symbol
   '("this"
     "super"
     "context"
     "true"
     "false"
     "undefined"
     )))

;; languages keywords
(defconst pjs-font-lock-keywords
  (js--regexp-opt-symbol
   '("namespace"
     "class"
     "with"
     "where"
     "order by"
     "group by"
     "inverse"
     "break"
     "case"
     "catch"
     "else"
     "for"
     "goto"
     "if"
     "instanceof"
     "new"
     "return"
     "switch"
     "try"
     "typeof"
     "var"
     "while"
     "foreach"
     "method"
     "function"
     )))

;; pjs types
(defconst pjs-font-lock-types
  (js--regexp-opt-symbol
   '(
     "int32"
     "int"
     "longfloat"
     "shortfloat"
     "string"
     "vector"
     "boolean"
     "hashtable"
     )))

;; method definition
(defconst *pjs-method-heading*
"^\\s-*method\\s-+\\(\\w+\\)\\s-+\\(\\<on\\>\\)\\s-+\\(\\w+\\)"
"Regular expression matching the start of a method header.")

;;method arguments
(defconst *pjs-method-arguments-start*
  "\\<method\\>\\(\\s-+\\w+\\)?\\s-*\\<on\\>\\(\\s-+\\w+\\)?(\\s-*\\w")

;; function definition
(defconst *pjs-function-heading*
"^\\s-*function\\s-+\\(\\w+\\)"
"Regular expression matching the start of a function header.")

;; function arguments
(defconst *pjs-function-arguments-start*
  "\\<function\\>\\(\\s-+\\w+\\)?\\s-*(\\s-*\\w")

;; function or method regexp
(defconst *pjs-function-or-method-regexp*
  "^\\s-*\\(\\<function\\>\\|\\<method\\>\\s-+\\w+\\s-+\\<on\\>\\s-+\\w+\\)(\\s-*\\w*)")

(defconst *arguments-end*
  "\\(\\w+\\)\\(\\s-*).*\\)?")

;; vars definition with optional type
(defconst *pjs-vars-regexp* 
;;  "^.*var\\s-+\\(\\w+\\)\\s-*\\(=\\|in\\|;\\).*$")
  "^.*var\\s-*\\([[:word:].]+\\)?\\s-+\\(\\w+\\)\\s-*[=;]")

;; class types, plc.somethinf
(defconst *pjs-class-type*
  "plc\\.\\w+")

;; new type(
(defconst *pjs-new-type-regexp*
  ".*new\\s-+\\(\\w+\\)\\s-*(")

;; function starts
(defconst *pjs-function-start-regexp*
;;  "\\(function\\|method\\|on new\\|on modifyafter\\|on modifybefore\\|on delete\\)")
  "\\<\\(function\\|method\\)\\>")

;; class definition
(defconst *pjs-class-definition*
  ".*class\\s-+\\(\\w+\\)")

;; symbols between ##
(defconst *pjs-symbols*
  "#[[:alnum:]-_]+#")

;; kernel functions are in italic
(defface pjs-kernel-functions-face
    '((t 
       :inherit font-lock-function-name-face :slant italic))
    "PJS kernel fonts are displayed in italic"
    )

(defvar pjs-kernel-functions-face
  'pjs-kernel-functions-face)

;; variable defintion are in bold
(defface pjs-var-definition-face
    '((t 
       :inherit font-lock-variable-name-face :weight bold))
    "variable defintion are in bold"
    )

(defvar pjs-var-definition-face
  'pjs-var-definition-face)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; highlight functions defined in the buffer
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; highlight kernel functions 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar *pjs-kernel-functions-cache* nil)

(defvar *pjs-kernel-functions-present* t)

(defun list-pjs-kernel-functions ()
  (cond (*pjs-kernel-functions-cache*
	 *pjs-kernel-functions-cache*)
	(*pjs-kernel-functions-present*
	 (progn (setq *pjs-kernel-functions-present* (when (fi::lep-open-connection-p) (fi:eval-in-lisp "(if (fboundp 'jvs::list-all-js-functions) t nil)")))
		(when *pjs-kernel-functions-present*
		  (setq *pjs-kernel-functions-cache* (format "\\(%s\\)" (js--regexp-opt-symbol (when (fi::lep-open-connection-p) (fi:eval-in-lisp "(jvs::list-all-js-functions)"))))))
		*pjs-kernel-functions-cache*))
	(t
	 nil)))

(defun search-kernel-functions (end)
  (when (list-pjs-kernel-functions)
    (let ((search-pattern (list-pjs-kernel-functions)))
      (re-search-forward search-pattern end t))))


;; method definition
(defconst *pjs-method-heading*
"^\\s-*method\\s-+\\(\\w+\\)\\s-+\\(\\<on\\>\\)\\s-+\\(\\w+\\)"
"Regular expression matching the start of a method header.")

;;method arguments
(defconst *pjs-method-arguments-start*
  "\\<method\\>\\(\\s-+\\w+\\)?\\s-*\\<on\\>\\(\\s-+\\w+\\)?(\\s-*\\w")

;; function definition
(defconst *pjs-function-heading*
"^\\s-*function\\s-+\\(\\w+\\)"
"Regular expression matching the start of a function header.")

;; function arguments
(defconst *pjs-function-arguments-start*
  "\\<function\\>\\(\\s-+\\w+\\)?\\s-*(\\s-*\\w")

;; function or method regexp
(defconst *pjs-function-or-method-regexp*
  "^\\s-*\\(\\<function\\>\\|\\<method\\>\\s-+\\w+\\s-+\\<on\\>\\s-+\\w+\\)(\\s-*\\w*)")

(defconst *arguments-end*
  "\\(\\w+\\)\\(\\s-*).*\\)?")

;; vars definition with optional type
(defconst *pjs-vars-regexp* 
;;  "^.*var\\s-+\\(\\w+\\)\\s-*\\(=\\|in\\|;\\).*$")
  "^.*var\\s-*\\([[:word:].]+\\)?\\s-+\\(\\w+\\)\\s-*[=;]")

;; class types, plc.somethinf
(defconst *pjs-class-type*
  "plc\\.\\w+")

;; new type(
(defconst *pjs-new-type-regexp*
  ".*new\\s-+\\(\\w+\\)\\s-*(")

;; function starts
(defconst *pjs-function-start-regexp*
;;  "\\(function\\|method\\|on new\\|on modifyafter\\|on modifybefore\\|on delete\\)")
  "\\<\\(function\\|method\\)\\>")

;; class definition
(defconst *pjs-class-definition*
  ".*class\\s-+\\(\\w+\\)")

;; symbols between ##
(defconst *pjs-symbols*
  "#[[:alnum:]-_]+#")

;; kernel functions are in italic
(defface pjs-kernel-functions-face
    '((t 
       :inherit font-lock-function-name-face :slant italic))
    "PJS kernel fonts are displayed in italic"
    )

(defvar pjs-kernel-functions-face
  'pjs-kernel-functions-face)

;; variable defintion are in bold
(defface pjs-var-definition-face
    '((t 
       :inherit font-lock-variable-name-face :weight bold))
    "variable defintion are in bold"
    )

(defvar pjs-var-definition-face
  'pjs-var-definition-face)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; highlight functions defined in the buffer
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; highlight class members 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun pjs-current-class ()
  ;; return the current class context :
  ;; the class if we are on a method
  ;; todo: typed var
  (save-excursion
    (let ((start-function (start-of-function)))
      (when start-function
	(goto-char start-function)
	(when (re-search-forward *pjs-method-heading* nil t)
	  (let ((class-name (match-string-no-properties 3))
		(namespace  (pjs-current-namespace)))
	    (format "%s.%s" namespace class-name)))))))
  

(defun search-class-members (end)
  ;;(message "end %s" end)
  (let* ((class-name (pjs-current-class))
	 (members (gethash class-name (pjs-class-members-regexp))))
    (when members
      (re-search-forward members end t))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; syntax hightlighting definition
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun setup-pjs-syntax-highlighting ()
  ;; syntax highlighting for pjs
  
  (setq font-locks nil)

  (setq font-lock-verbose t)

  ;; list of font-lock-keywords in the right order

  ;; Functions defined in buffers
;;  (push (cons 'search-buffer-functions font-lock-function-name-face) font-locks)
  (push (list 'search-buffer-functions 1 font-lock-function-name-face) font-locks)

  ;; Kernel functions
  (push (cons 'search-kernel-functions pjs-kernel-functions-face) font-locks)
  (push (list 'search-kernel-functions 1 pjs-kernel-functions-face) font-locks)

  ;; Variables in the function 
  (push (cons 'search-vars-from-context font-lock-variable-name-face) font-locks)

  ;; class members
  (push (cons 'search-class-members opx2-hg-getset-face) font-locks)

  ;; Global vars
  (push (cons 'search-global-vars font-lock-variable-name-face) font-locks)
  
  ;; Variable definitions
;;  (push (list *pjs-vars-regexp* 1 font-lock-type-face) font-locks)
;;  (push (list *pjs-vars-regexp* 2 pjs-var-definition-face) font-locks)

  ;; class definitions
  (push (list *pjs-class-definition* 1 font-lock-type-face) font-locks)
  
  ;; New type
  (push (list *pjs-new-type-regexp* 1 font-lock-type-face) font-locks)

  ;; symbols
  (push (list *pjs-symbols* 0 font-lock-preprocessor-face) font-locks)  
  
  ;; class types, plc.something
  (push (list *pjs-class-type* 0 font-lock-type-face) font-locks)
  
  ;; Function definition
  (push (list *pjs-function-heading* 1 font-lock-function-name-face) font-locks)
  ;; Function arguments
  (push (list
	 (concat *pjs-function-arguments-start*)
	 (list *arguments-end*
	       '(backward-char)
	       '(end-of-line)
	       '(1 pjs-var-definition-face))) font-locks)
  ;; Method definition
  (push (list *pjs-method-heading* 1 font-lock-function-name-face) font-locks)
  (push (list *pjs-method-heading* 2 font-lock-keyword-face) font-locks)
  (push (list *pjs-method-heading* 3 font-lock-type-face) font-locks)  
  ;; Method arguments
  (push (list
	 (concat *pjs-method-arguments-start*)
	 (list *arguments-end*
	       '(backward-char)
	       '(end-of-line)
	       '(1 pjs-var-definition-face))) font-locks)
  ;; keywords
  (push (cons pjs-font-lock-keywords font-lock-keyword-face) font-locks)
  ;; constants
  (push (cons pjs-font-lock-constants font-lock-constant-face) font-locks)
  ;; types
  (push (cons pjs-font-lock-types font-lock-type-face) font-locks)
  
  ;; comments
  (set (make-local-variable 'comment-start) "// ")
  (set (make-local-variable 'comment-end) "")
 
  (set (make-local-variable 'font-lock-defaults)
       (list font-locks
	     nil  ;; fontify strings and comments
	     t    ;; case insensitive fontifying
	     ))

  ;; regexp to mark the beginning of a function
;;  (setq defun-prompt-regexp *pjs-function-or-method-regexp*)

  ;; fontify all the things
  (syntax-propertize (point-max))
  )

(defun force-syntax-highlighting ()
  (interactive)
  (font-lock-fontify-buffer))
